// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

import "lib/forge-std/src/Test.sol";

import "../src/Counter.sol";

interface Uni {
    function balanceOf(address account) external view returns (uint256);
}

contract ContractSwapTest is Test {
    //Counter public counter;
    //your address
    address constant myAddress = 0x6aD20E2a1579D396D1d6C22fFcDc5E5F06F484C3;
    //contrac address you want to interact with
    address constant swapUni = 0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD;

    Uni uni = Uni(0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984);

    function testSwap() public {
        emit log_named_uint("Current eth bala of myAddress", myAddress.balance);
        emit log_named_uint(
            "Uni balance of myAddress before",
            uni.balanceOf(myAddress)
        );

        bytes
            memory data = hex"3593564c000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000652321c800000000000000000000000000000000000000000000000000000000000000050b00000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000220000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004600000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000002c68af0bb1400000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000002386f26fc100000000000000000000000000000000000000000000000000000018284da542bc1ef00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b14000bb81f9840a85d5af5bf1d1762f925bdaddc4201f98400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000006a94d74f430000000000000000000000000000000000000000000000000000004885873bc0674d00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b140027101f9840a85d5af5bf1d1762f925bdaddc4201f98400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000002386f26fc1000000000000000000000000000000000000000000000000000000182cdc660ecce600000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002bfff9976782d46cc05630d1f6ebab18b2324d6b140001f41f9840a85d5af5bf1d1762f925bdaddc4201f98400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000600000000000000000000000001f9840a85d5af5bf1d1762f925bdaddc4201f984000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000001e3373df5faf623";

        vm.prank(myAddress);

        (bool sent, ) = payable(swapUni).call{value: 0.2 ether}(data);
        require(sent, "Sending Failed");

        emit log_named_uint(
            "Uni balance of myAddress after",
            uni.balanceOf(myAddress)
        );
    }
}
